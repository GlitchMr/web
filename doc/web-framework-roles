# the controller holds information that applies to all actions
# there. The initialization will look in the config file if there is
# a definition to any of the attributes defined in the package.
role Controller {}

# this is a normal private action
role Action {
   has Controller $.controller;
   has Str $.private-name;
   has Callable $.begin-closure;
   has Callable $.execute-closure;
   has Callable $.end-closure;
}

role Action::Private {
   multi method begin {
     $.begin-closure.(self)
       if $.begin-closure;
   }
   multi method execute {
     $.execute-closure.(self)
       if $.execute-closure;
   }
   multi method end {
     $.end-closure.(self)
       if $.end-closure;
   }
}

# this is used to mask out the base-uri for the application
role Action::Root does Action::Private does Pattern {
   has URI $.base;

   method ACCEPTS {
     # returns true and set CALLER::<$/> if match.
   }
}

# this is an action that might be part of a chain
role Action::Chained does Pattern {
   has Action $.parent;
   has Pattern $.path-part;
   has Int $.capture-args;

   multi method begin {
     $.parent.*begin
       if $.parent;
     $.begin-closure.(self)
       if $.begin-closure;
   }

   multi method execute($match) {
     $.parent.*execute($match.<parent>);
       if $.parent;
     $match.delete('parent');
     $.execute-closure.(self, |$match)
       if $.execute-closure;
   }

   multi method end {
     $.parent.*end
       if $.parent;
     $.end-closure.(self)
       if $.end-closure;
   }

   method ACCEPTS($request) {

     # first try to match the parent, then take $/.to and try to
     # match that point onwards...
     
     # returns true and set CALLER::<$/> if match.
     # the match should include the captures, which will then be used
     # as capture when calling the closure

   }
}

# this is an action that is seen as an endpoint
role Action::Public does Action::Chained {
   has Int $.priority; # match order
}

# the dispatcher catalogs all actions, and is responsible for
# actually trying to invoke them
role Dispatcher {
  has %!actions;
  has @!public;

  method register-action(Action $a) {
    fail 'Duplicated action'
      if %!actions.exists($a.private-name);
    %!actions{$a.private-name} = $a;
    if $a ~~ Action::Public {
      @!public = (@!public, $a).sort { $_.priority }
    }
  }

  method dispatch() {
    my $match;
    for @!public --> $action {
      if $*request ~~ $action  {
        $match = $action;
      }
    }
    if $match {
      self.run-action($match, $/);
    } else {
      fail 'No action matched';
    }
  }

  method run-action($action, $match?) {
    my $errors is context<rw>;
    try {
      $action.*begin;
      if $match {
        $action.*execute($match);
      } else {
        $action.*execute;
      }
      CATCH {
        $_.handled = 1;
        $errors = $_;
      }
    }
    $action.*end;
    CONTROL {
      when ControlExceptionDetach {
        self.run-action(%!actions{$_.path});
      }
    }
  }

}

# An application has components and a dispatcher
role Application {
  has %.components;
  has Dispatcher $.dispatcher handles <register-action dispatch>;

  # this is where the several steps performed by catalyst should
  # reside, so application-wide plugins can modify
  multi method prepare { };
  multi method finalize { };


  multi method handle($request? is context = $*request,
                      $response? is context = $*response) {
     my $application is context = self;
     self.prepare;
     self.dispatch;
     self.finalize;
  };

}
