.\" Automatically generated by Pod::Man 2.12 (Pod::Simple 3.05)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sh \" Subsection heading
.br
.if t .Sp
.ne 5
.PP
\fB\\$1\fR
.PP
..
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
'br\}
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.Sh), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.if \nF \{\
.    de IX
.    tm Index:\\$1\t\\n%\t"\\$2"
..
.    nr % 0
.    rr F
.\}
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "Text::SmartLinks 3"
.TH Text::SmartLinks 3 "2009-07-26" "perl v5.8.8" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
Text::SmartLinks \- connecting test files with pod documentation
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 6
\&  smartlinks.pl t/*/*.t t/*/*/*.t
\&  smartlinks.pl \-\-dir t
\&  smartlinks.pl \-\-css foo.css \-\-out\-dir=public_html t/syntax/*.t
\&  smartlinks.pl \-\-check t/*/*.t t/*/*/*.t
\&  smartlinks.pl \-\-check t/some/test.t
\&  smartlinks.pl \-\-missing t/*/*.t t/*/*/*.t
.Ve
.PP
If in the root directory of a \s-1CPAN\s0 package type the following:
.PP
.Vb 1
\&  smartlinks.pl \-\-pod\-dir lib/ \-\-dir t/ \-\-out\-dir html/ \-\-index
.Ve
.PP
In the root of Text::SmartLinks type in the following:
.PP
.Vb 1
\&  perl \-Ilib script/smartlinks.pl \-\-pod\-dir lib/ \-\-dir t/ \-\-out\-dir html/ \-\-index
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
The plan is to change the Text::SmartLinks module and write a new 
smartlinks.pl script so it will be usable in any Perl 5 or Perl 6 
project to generate the \s-1HTML\s0 pages combining the \s-1POD\s0 content from
the .pod and .pm files and test scripts.
.PP
In addition the script should be able to generate further reports
in \s-1HTML\s0 format that help the developers.
.PP
The usage should default to parsing the files in lib/ for documentation
and the .t files in the t/ subdirectory.
.SH "Requirements"
.IX Header "Requirements"
Process both Perl 5 and Perl 6 test files in an arbitraty directory
to collect smartlinks.
Default should be either the local t/ directory or the t/spec directory 
of Pugs (for historical reasons).
.PP
Process .pod and .pm files (but maybe other files as well) with either Perl 5 
or Perl 6 pod in them and with possibly also code in them.
.PP
Smartlinks should be able to say the name of the document where they link to.
.PP
.Vb 2
\&    L<Smolder/Text of head1>
\&    L<Smolder::Util/Text o head2>
.Ve
.PP
Map to either Smolder.pm or Smolder.pod and Smolder/Util.pm or Smolder/Util.pod
.PP
Need special cases for the Perl 6 documentation so the smartlinks can
have the following links pointing to S06\-routines.pod and 
S32\-setting\-library/Abstraction.pod
.PP
.Vb 2
\&    L<S06/Blocks>
\&    L<S32::Abstraction>
.Ve
.SH "Old Design Decisions"
.IX Header "Old Design Decisions"
.IP "\(bu" 4
This script should have as few non-core module dependencies as possible.
.IP "\(bu" 4
One doesn't have to build pugs so as to run \fIsmartlinks.pl\fR. Of course,
optional advanced features may require the user to run pugs'
\&\*(L"make\*(R" or even \*(L"make smoke\*(R".
.SH "Smartlink Syntax"
.IX Header "Smartlink Syntax"
Smartlinks are planted in the test file, and are pointed to the appropriate sections
of the Synopsis you are using to write the test.
.PP
They look like pod links:
.PP
.Vb 4
\&    L<S06/Blocks>            # "S06" is synopsis 6, and "Blocks" is the section
\&    L<S03/"Hyper operators"> # quotes can be used when spaces are in the title,
\&                             # but is NOT required.
\&    L<S03/Hyper operators>   # just fine
.Ve
.PP
The section name should be copied verbatim from the \s-1POD\s0
(usually after \f(CW\*(C`=head\*(C'\fR), including any \s-1POD\s0 tags like \f(CW\*(C`...\*(C'\fR
and punctuations. The sections, however, are not supposed to be nested.
That is, a \f(CW\*(C`=head1\*(C'\fR won't really contain a \f(CW\*(C`=head2\*(C'\fR; they're disjoint
according to the current implementation.
.PP
The smartlinks also have a weird (also important) extension:
you can specify some keyphrases, to skip forward from the linked
section, so the smartlink is put into
a more specific place:
.PP
.Vb 1
\&    L<S05/"Return values from matches"/"In numeric context" number 'matches:'>
.Ve
.PP
The above smartlink is appropriate next to a test case checking rule application in
numeric context, and it will place the backlink appropriately.
.PP
All the keyphrases listed after the second slash in a smartlink should appear in
a single sentence from the synopsis text, and the order is significant. If
there're spaces in a keyphrase, quote it using either double-quotes or signle-quotes.
.PP
In contrast with the case of section name, you should never use \s-1POD\s0 tags like
\&\f(CW\*(C`...\*(C'\fR in a keyphrase. util/smartlinks.pl will do the right thing. You can use,
however, pod directives in the keyphrases, just like this:
.PP
.Vb 1
\&    # L<S04/Str/"=item split">
.Ve
.PP
Smartlinks in .t files can be preceded by nothing but spaces or \*(L"#\*(R", furthermore,
there should be no trailing text on the same line, otherwise
they can't be recognized by tools. Here're some *invalid* samples:
.PP
.Vb 2
\&    # the following smartlink is INVALID!!!
\&    # Link is L<S04/Str>
\&
\&    # the following smartlink is INVALID TOO!!!
\&    # L<S04/Str> # This is a comment
.Ve
.PP
There's also a variant for the smartlink syntax:
.PP
.Vb 1
\&   # L<syn/sec/key phrases>
.Ve
.PP
A smartlink can span at most 2 lines:
.PP
.Vb 2
\&   # L<S04/section name/key1
\&   #   "key2" key3 key4>
.Ve
.PP
Only the keyphrase list part can continue to the next line. So the following example
is invalid:
.PP
.Vb 2
\&   # L<S04/section
\&   #   name/blah blah blah>      # WRONG!!!
.Ve
.PP
Please don't put a smartlink in the middle of a group of tests. Put it right
*before* the group of tests it is related to.
.PP
Multiple adjacent smartlinks can share the same snippet of tests right below
them:
.PP
.Vb 3
\&    # L<S02/Context/boolean "?">
\&    # L<S03/Changes to Perl 5 operators/"?" imposes boolean context>
\&    { ... }
.Ve
.PP
By doing this, one can effectively link one group of tests to
multple places in the Synopses, leading to m\-to-n correspondance.
.PP
smartlinks.pl can take care of this kind of special cases.
.PP
You can put a \s-1URL\s0 to create a generic link:
.PP
.Vb 1
\&  L<"http://groups.google.de/group/perl.perl6.language/msg/07aefb88f5fc8429">
.Ve
.PP
or without quotes:
.PP
.Vb 1
\&  L<http://www.nntp.perl.org/group/perl.perl6.language/26071>
.Ve
.PP
To see some examples, or look at the *.t files in the t/ directory of this project.
.PP
There were also some legacy smartlinks using the following syntax:
.PP
.Vb 3
\&   L<S04/"section name" /regex/>
\&   L<<S04/"section name" /regex/>>
\&   L<<S04/"section name">>
.Ve
.PP
They're no longer supported by util/smartlinks.pl. Use the current syntax.
.SH "Basic Algorithm"
.IX Header "Basic Algorithm"
.IP "1." 4
We scan over all the specified .t files; collect smartlinks and positional
info about the test code snippets as we go. When all these work have been finished,
we obtain a tree structure, which is named \f(CW$linktree\fR in the source code.
.Sp
To make this tree minimal, we only store the .t file name and line numbers, rather
than the snippets' source code itself.
.Sp
The structure of \f(CW$linktree\fR is like this:
.Sp
.Vb 10
\&    {
\&      'S12' => {
\&        'Traits' => [
\&          [
\&            undef,
\&            [
\&              't/oo/traits/basic.t',
\&              '13',
\&              '38'
\&            ]
\&          ],
\&          [
\&            '/If you say/',
\&            [
\&              't/oo/delegation.t',
\&              '56',
\&              '69'
\&            ]
\&          ],
\&        ],
\&      },
\&      'S02' => {
\&        'Whitespace and Comments' => [
\&          [
\&            '"Embedded comments" "#" plus any bracket',
\&            [
\&              't/syntax/comments.t',
\&              10,
\&              48
\&            ]
\&          ],
\&        ]
\&      }
\&    }
.Ve
.Sp
This step is mostly done by sub \f(CW\*(C`process_t_file\*(C'\fR.
.IP "2." 4
We process the synopsis .pod files one by one and generate
\&\s-1HTML\s0 files integrated with test code snippets using the
\&\f(CW$linktree\fR structure discussed above.
.Sp
This is mostly done by sub \f(CW\*(C`process_pod_file\*(C'\fR.
.Sp
Because it is an enormous step, we can further divide it into several
sub steps:
.RS 4
.IP "\(bu" 4
We parse each .pod into a tree, which is known as \f(CW$podtree\fR in the
source code. (See sub \f(CW\*(C`parse_pod\*(C'\fR.)
.Sp
The structure of \f(CW$podtree\fR looks like this:
.Sp
.Vb 12
\&    {
\&      'Names and Variables' => [
\&        '=over 4' . "\en",
\&        '=item *' . "\en",
\&        'The C<$Package\e'var> syntax is gone.  Use C<$Package::var> instead.' . "\en",
\&        '=item *' . "\en",
\&        'Perl 6 includes a system of B<sigils> to mark the fundamental' . "\en".
\&            'structural type of a variable:' . "\en",
\&        ...
\&      ],
\&      ...
\&    }
.Ve
.IP "\(bu" 4
We look up every related smartlink from every \f(CW$podtree\fR, generate .t code
snippets along the way, and insert placeholders (like \*(L"_SMART_LINK_3\*(R" into
the corresponding \f(CW$podtree\fR. (See subs \f(CW\*(C`parse_pattern\*(C'\fR, \f(CW\*(C`process_paragraph\*(C'\fR,
and \f(CW\*(C`gen_code_snippet\*(C'\fR.)
.IP "\(bu" 4
Now we emit Pod source back from the modified $\f(CW\*(C`podtree\*(C'\fR's. (See sub \f(CW\*(C`emit_pod\*(C'\fR.)
.IP "\(bu" 4
After that, we generate \s-1HTML\s0 source from the Pod source with snippet placeholders
using Pod::Simple::HTML. (See sub \f(CW\*(C`gen_html\*(C'\fR.)
.IP "\(bu" 4
At last, we replace every snippet placeholders in the \s-1HTML\s0 source with the real
snippet code (also in \s-1HTML\s0 format).
.RE
.RS 4
.RE
.SH "SEE ALSO"
.IX Header "SEE ALSO"
.IP "\(bu" 4
\&\fIt/README\fR in the Pugs source tree.
.IP "\(bu" 4
The articles on the Pugs blogs:
.Sp
<http://pugs.blogs.com/pugs/2006/08/integrating_the.html>
.Sp
<http://pugs.blogs.com/pugs/2006/09/check_smoke_res.html>
.Sp
<http://pugs.blogs.com/pugs/2006/09/the_benefits_of.html>
.IP "\(bu" 4
The synopses in <http://perlcabal.org/syn> are generated by this script.
.SH "METHODS"
.IX Header "METHODS"
.Sh "new"
.IX Subsection "new"
Constructor, can get a \s-1HASH\s0 reference as it is a base class
of Class::Accessor
.Sh "process_test_files"
.IX Subsection "process_test_files"
Gets a list of .t test files, calls process_t_file on each on of them.
.Sh "process_t_file"
.IX Subsection "process_t_file"
Gets a path to a .t file, reads line by line and collects
the smartlinks in it to a hash structure using the 
\&\f(CW\*(C`add_link\*(C'\fR function.
.Sh "parse_pattern"
.IX Subsection "parse_pattern"
Convert patterns used in 00\-smartlinks.to perl 5 regexes
.Sh "process_paragraph"
.IX Subsection "process_paragraph"
Process paragraphs of the pod file: unwrap lines, strip \s-1POD\s0 tags, and etc.
.Sh "gen_code_snippet"
.IX Subsection "gen_code_snippet"
Gets a triplet of [file, from, to] and generates an \s-1HTML\s0 
snippet from that section of the given file.
.PP
Note that this function has been optimized for space rather
than time.
.Sh "get_javascript"
.IX Subsection "get_javascript"
Returns the content of the smartlink.js file.
Probably we should just copy the .js file to the html directory
and not embed it.
.Sh "link_count"
.IX Subsection "link_count"
link_count_inc increments the link counter.
.PP
link_count returns the current number of links.
.SH "AUTHOR"
.IX Header "AUTHOR"
Agent Zhang (<agentzh@gmail.com>) wrote the initial
implementation, getting help from many others in the Pugs team.
.PP
Current maintainer: The Pugs team
.SH "COPYRIGHT"
.IX Header "COPYRIGHT"
Copyright (c) 2006 \- 2009 by the Pugs Team.
.SH "LICENSE"
.IX Header "LICENSE"
Text::SmartLinks is free software; you can redistribute it and/or modify it under the
terms of the Artistic License 2.0.  (Note that, unlike the Artistic License
1.0, version 2.0 is \s-1GPL\s0 compatible by itself, hence there is no benefit to
having an Artistic 2.0 / \s-1GPL\s0 disjunction.)
